from grafanalib._gen import DashboardEncoder
from grafanalib.core import (
    Dashboard,
    TimeSeries,
    GaugePanel,
    Target,
    GridPos,
    OPS_FORMAT,
    AlertGroup,
    AlertRulev8,
    Target,
    AlertCondition,
    LowerThan,
    Row,
    Graph,
    single_y_axis,
    OP_OR,
    OP_AND,
    RTYPE_LAST,
    RTYPE_AVG
)
import json
import requests
from os import getenv

# Insert the Grafana API key and the Grafana Server URL.
grafana_api_key = ""
grafana_server = ""

def get_dashboard_json(dashboard, overwrite=False, message="Updated by grafanlib"):
    '''
    get_dashboard_json generates JSON from grafanalib Dashboard object

    :param dashboard - Dashboard() created via grafanalib
    '''

    # grafanalib generates json which need to pack to "dashboard" root element
    return json.dumps(
        {
            "dashboard": dashboard.to_json_data(),
            "overwrite": overwrite,
            "message": message
        }, sort_keys=True, indent=2, cls=DashboardEncoder)


def upload_to_grafana(json, server, api_key, verify=True):
    '''
    upload_to_grafana tries to upload dashboard to grafana and prints response

    :param json - dashboard json generated by grafanalib
    :param server - grafana server name
    :param api_key - grafana api key with read and write privileges
    '''

    headers = {'Authorization': f"Bearer {api_key}", 'Content-Type': 'application/json'}
    r = requests.post(f"https://{server}/api/dashboards/db", data=json, headers=headers, verify=verify)
    # TODO: add error handling
    print(f"{r.status_code} - {r.content}")

# The UID value must be the UID value from the channel notification. You can find 
# the UID by querying the Grafana API directly to retrieve it. 
alert_json = {
    "alertRuleTags": {"environment": "testing"},
        "conditions": [
          {
            "evaluator": {
              "params": [
                400
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "5m",
        "frequency": "1m",
        "handler": 1,
        "message": "This is a test alert!",
        "name": "TestAlertInstance1",
        "notifications": [
            {
                "uid": "UIDFORALERTCHANNEL"
            }
        ]
}

json_panel = Dashboard(
    title="Python generated dashboard",
    rows=[
        # This creates a row with a panel that contains 2 graphs.
        Row(panels=[
          Graph(
              title="Totale selects on database",
              dataSource='prometheus',
              targets=[
                  Target(
                      expr='totalSelectsFromDatabase{}',
                      legendFormat="",
                      interval="",
                      datasource="prometheus",
                      refId= "A", 
                  ),
              ],
              yAxes=single_y_axis(format=OPS_FORMAT),
              alert=alert_json
          ),
          Graph(
              title="Total selects on database from specific source",
              dataSource='prometheus',
              targets=[
                  Target(
                      expr='totalSelects{instance="SOURCE1"}',
                      legendFormat="",
                      interval="",
                      datasource="prometheus",
                      refId= "A", 
                  ),
              ],
              yAxes=single_y_axis(format=OPS_FORMAT),
          )
        ]),
        # This createsa new row below the first one. This row contains a graph and a timeseries visualization
        Row(panels=[
          Graph(
              title="Find All Data across instansces",
              dataSource='prometheus',
              targets=[
                  Target(
                      expr='findAllData{}',
                      legendFormat="",
                      interval="",
                      datasource="prometheus",
                      refId= "A", 
                  ),
              ],
              yAxes=single_y_axis(format=OPS_FORMAT),
          ),
          TimeSeries(
              title="Find All Data-INSTANCE1",
              dataSource='prometheus',
              targets=[
                  Target(
                      expr='findAllData{instance="INSTANCE1"}',
                      legendFormat="",
                      interval="",
                      datasource="prometheus",
                      refId= "A", 
                  ),
              ]
          ),
        ]),
    ],
).auto_panel_ids()

if __name__ == "__main__":
    # Create a Dashboard. uid parameter must be unique.
    my_dashboard = Dashboard(title="My awesome dashboard", uid='abifsd')
    # Creates a JSON object of the dashboard
    my_dashboard_json = get_dashboard_json(my_dashboard, overwrite=True)
    # Uploades my_dashboard_json to Grafana
    upload_to_grafana(my_dashboard_json, grafana_server, grafana_api_key)
    # Creates a new panel
    json_panel_json = get_dashboard_json(json_panel, overwrite=True)
    # Uploads it to Grafana
    upload_to_grafana(json_panel_json, grafana_server, grafana_api_key)
